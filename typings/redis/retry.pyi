"""
This type stub file was generated by pyright.
"""

import abc
from typing import Any, Callable, Generic, Iterable, TYPE_CHECKING, Tuple, Type, TypeVar
from redis.backoff import AbstractBackoff

T = TypeVar("T")
E = TypeVar("E", bound=Exception, covariant=True)
if TYPE_CHECKING:
    ...
class AbstractRetry(Generic[E], abc.ABC):
    """Retry a specific number of times after a failure"""
    _supported_errors: Tuple[Type[E], ...]
    def __init__(self, backoff: AbstractBackoff, retries: int, supported_errors: Tuple[Type[E], ...]) -> None:
        """
        Initialize a `Retry` object with a `Backoff` object
        that retries a maximum of `retries` times.
        `retries` can be negative to retry forever.
        You can specify the types of supported errors which trigger
        a retry with the `supported_errors` parameter.
        """
        ...
    
    @abc.abstractmethod
    def __eq__(self, other: Any) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def update_supported_errors(self, specified_errors: Iterable[Type[E]]) -> None:
        """
        Updates the supported errors with the specified error types
        """
        ...
    
    def get_retries(self) -> int:
        """
        Get the number of retries.
        """
        ...
    
    def update_retries(self, value: int) -> None:
        """
        Set the number of retries.
        """
        ...
    


class Retry(AbstractRetry[Exception]):
    __hash__ = ...
    def __init__(self, backoff: AbstractBackoff, retries: int, supported_errors: Tuple[Type[Exception], ...] = ...) -> None:
        ...
    
    def __eq__(self, other: Any) -> bool:
        ...
    
    def call_with_retry(self, do: Callable[[], T], fail: Callable[[Exception], Any]) -> T:
        """
        Execute an operation that might fail and returns its result, or
        raise the exception that was thrown depending on the `Backoff` object.
        `do`: the operation to call. Expects no argument.
        `fail`: the failure handler, expects the last error that was thrown
        """
        ...
    


