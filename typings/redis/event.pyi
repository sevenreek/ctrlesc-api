"""
This type stub file was generated by pyright.
"""

import asyncio
import threading
from abc import ABC, abstractmethod
from enum import Enum
from typing import List, Optional, Union
from redis.credentials import CredentialProvider

class EventListenerInterface(ABC):
    """
    Represents a listener for given event object.
    """
    @abstractmethod
    def listen(self, event: object): # -> None:
        ...
    


class AsyncEventListenerInterface(ABC):
    """
    Represents an async listener for given event object.
    """
    @abstractmethod
    async def listen(self, event: object): # -> None:
        ...
    


class EventDispatcherInterface(ABC):
    """
    Represents a dispatcher that dispatches events to listeners
    associated with given event.
    """
    @abstractmethod
    def dispatch(self, event: object): # -> None:
        ...
    
    @abstractmethod
    async def dispatch_async(self, event: object): # -> None:
        ...
    


class EventException(Exception):
    """
    Exception wrapper that adds an event object into exception context.
    """
    def __init__(self, exception: Exception, event: object) -> None:
        ...
    


class EventDispatcher(EventDispatcherInterface):
    def __init__(self) -> None:
        """
        Mapping should be extended for any new events or listeners to be added.
        """
        ...
    
    def dispatch(self, event: object): # -> None:
        ...
    
    async def dispatch_async(self, event: object): # -> None:
        ...
    


class AfterConnectionReleasedEvent:
    """
    Event that will be fired before each command execution.
    """
    def __init__(self, connection) -> None:
        ...
    
    @property
    def connection(self): # -> Any:
        ...
    


class AsyncAfterConnectionReleasedEvent(AfterConnectionReleasedEvent):
    ...


class ClientType(Enum):
    SYNC = ...
    ASYNC = ...


class AfterPooledConnectionsInstantiationEvent:
    """
    Event that will be fired after pooled connection instances was created.
    """
    def __init__(self, connection_pools: List, client_type: ClientType, credential_provider: Optional[CredentialProvider] = ...) -> None:
        ...
    
    @property
    def connection_pools(self): # -> List[Any]:
        ...
    
    @property
    def client_type(self) -> ClientType:
        ...
    
    @property
    def credential_provider(self) -> Union[CredentialProvider, None]:
        ...
    


class AfterSingleConnectionInstantiationEvent:
    """
    Event that will be fired after single connection instances was created.

    :param connection_lock: For sync client thread-lock should be provided,
    for async asyncio.Lock
    """
    def __init__(self, connection, client_type: ClientType, connection_lock: Union[threading.RLock, asyncio.Lock]) -> None:
        ...
    
    @property
    def connection(self):
        ...
    
    @property
    def client_type(self) -> ClientType:
        ...
    
    @property
    def connection_lock(self) -> Union[threading.RLock, asyncio.Lock]:
        ...
    


class AfterPubSubConnectionInstantiationEvent:
    def __init__(self, pubsub_connection, connection_pool, client_type: ClientType, connection_lock: Union[threading.RLock, asyncio.Lock]) -> None:
        ...
    
    @property
    def pubsub_connection(self):
        ...
    
    @property
    def connection_pool(self):
        ...
    
    @property
    def client_type(self) -> ClientType:
        ...
    
    @property
    def connection_lock(self) -> Union[threading.RLock, asyncio.Lock]:
        ...
    


class AfterAsyncClusterInstantiationEvent:
    """
    Event that will be fired after async cluster instance was created.

    Async cluster doesn't use connection pools,
    instead ClusterNode object manages connections.
    """
    def __init__(self, nodes: dict, credential_provider: Optional[CredentialProvider] = ...) -> None:
        ...
    
    @property
    def nodes(self) -> dict:
        ...
    
    @property
    def credential_provider(self) -> Union[CredentialProvider, None]:
        ...
    


class ReAuthConnectionListener(EventListenerInterface):
    """
    Listener that performs re-authentication of given connection.
    """
    def listen(self, event: AfterConnectionReleasedEvent): # -> None:
        ...
    


class AsyncReAuthConnectionListener(AsyncEventListenerInterface):
    """
    Async listener that performs re-authentication of given connection.
    """
    async def listen(self, event: AsyncAfterConnectionReleasedEvent): # -> None:
        ...
    


class RegisterReAuthForPooledConnections(EventListenerInterface):
    """
    Listener that registers a re-authentication callback for pooled connections.
    Required by :class:`StreamingCredentialProvider`.
    """
    def __init__(self) -> None:
        ...
    
    def listen(self, event: AfterPooledConnectionsInstantiationEvent): # -> None:
        ...
    


class RegisterReAuthForSingleConnection(EventListenerInterface):
    """
    Listener that registers a re-authentication callback for single connection.
    Required by :class:`StreamingCredentialProvider`.
    """
    def __init__(self) -> None:
        ...
    
    def listen(self, event: AfterSingleConnectionInstantiationEvent): # -> None:
        ...
    


class RegisterReAuthForAsyncClusterNodes(EventListenerInterface):
    def __init__(self) -> None:
        ...
    
    def listen(self, event: AfterAsyncClusterInstantiationEvent): # -> None:
        ...
    


class RegisterReAuthForPubSub(EventListenerInterface):
    def __init__(self) -> None:
        ...
    
    def listen(self, event: AfterPubSubConnectionInstantiationEvent): # -> None:
        ...
    


