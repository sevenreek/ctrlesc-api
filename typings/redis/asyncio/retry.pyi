"""
This type stub file was generated by pyright.
"""

from typing import Any, Awaitable, Callable, TYPE_CHECKING, Tuple, Type, TypeVar
from redis.exceptions import RedisError
from redis.retry import AbstractRetry
from redis.backoff import AbstractBackoff

T = TypeVar("T")
if TYPE_CHECKING:
    ...
class Retry(AbstractRetry[RedisError]):
    __hash__ = ...
    def __init__(self, backoff: AbstractBackoff, retries: int, supported_errors: Tuple[Type[RedisError], ...] = ...) -> None:
        ...
    
    def __eq__(self, other: Any) -> bool:
        ...
    
    async def call_with_retry(self, do: Callable[[], Awaitable[T]], fail: Callable[[RedisError], Any]) -> T:
        """
        Execute an operation that might fail and returns its result, or
        raise the exception that was thrown depending on the `Backoff` object.
        `do`: the operation to call. Expects no argument.
        `fail`: the failure handler, expects the last error that was thrown
        """
        ...
    


