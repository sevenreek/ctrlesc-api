"""
This type stub file was generated by pyright.
"""

import sys
from typing import Callable, List, Optional, TypedDict, Union
from ..typing import EncodableT
from .base import AsyncBaseParser, AsyncPushNotificationsParser, BaseParser, PushNotificationsParser

if sys.version_info.major >= 3 and sys.version_info.minor >= 11:
    ...
else:
    ...
NOT_ENOUGH_DATA = ...
class _HiredisReaderArgs(TypedDict, total=False):
    protocolError: Callable[[str], Exception]
    replyError: Callable[[str], Exception]
    encoding: Optional[str]
    errors: Optional[str]
    ...


class _HiredisParser(BaseParser, PushNotificationsParser):
    "Parser class for connections using Hiredis"
    def __init__(self, socket_read_size) -> None:
        ...
    
    def __del__(self): # -> None:
        ...
    
    def handle_pubsub_push_response(self, response):
        ...
    
    def on_connect(self, connection, **kwargs): # -> None:
        ...
    
    def on_disconnect(self): # -> None:
        ...
    
    def can_read(self, timeout): # -> bool:
        ...
    
    def read_from_socket(self, timeout=..., raise_on_timeout=...): # -> bool:
        ...
    
    def read_response(self, disable_decoding=..., push_request=...): # -> object | Any | list[Any] | None:
        ...
    


class _AsyncHiredisParser(AsyncBaseParser, AsyncPushNotificationsParser):
    """Async implementation of parser class for connections using Hiredis"""
    __slots__ = ...
    def __init__(self, socket_read_size: int) -> None:
        ...
    
    async def handle_pubsub_push_response(self, response):
        ...
    
    def on_connect(self, connection): # -> None:
        ...
    
    def on_disconnect(self): # -> None:
        ...
    
    async def can_read_destructive(self): # -> bool:
        ...
    
    async def read_from_socket(self): # -> Literal[True]:
        ...
    
    async def read_response(self, disable_decoding: bool = ..., push_request: bool = ...) -> Union[EncodableT, List[EncodableT]]:
        ...
    


