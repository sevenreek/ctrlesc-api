"""
This type stub file was generated by pyright.
"""

from typing import List

class Field:
    """
    A class representing a field in a document.
    """
    NUMERIC = ...
    TEXT = ...
    WEIGHT = ...
    GEO = ...
    TAG = ...
    VECTOR = ...
    SORTABLE = ...
    NOINDEX = ...
    AS = ...
    GEOSHAPE = ...
    INDEX_MISSING = ...
    INDEX_EMPTY = ...
    def __init__(self, name: str, args: List[str] = ..., sortable: bool = ..., no_index: bool = ..., index_missing: bool = ..., index_empty: bool = ..., as_name: str = ...) -> None:
        """
        Create a new field object.

        Args:
            name: The name of the field.
            args:
            sortable: If `True`, the field will be sortable.
            no_index: If `True`, the field will not be indexed.
            index_missing: If `True`, it will be possible to search for documents that
                           have this field missing.
            index_empty: If `True`, it will be possible to search for documents that
                         have this field empty.
            as_name: If provided, this alias will be used for the field.
        """
        ...
    
    def append_arg(self, value): # -> None:
        ...
    
    def redis_args(self): # -> list[str]:
        ...
    


class TextField(Field):
    """
    TextField is used to define a text field in a schema definition
    """
    NOSTEM = ...
    PHONETIC = ...
    def __init__(self, name: str, weight: float = ..., no_stem: bool = ..., phonetic_matcher: str = ..., withsuffixtrie: bool = ..., **kwargs) -> None:
        ...
    


class NumericField(Field):
    """
    NumericField is used to define a numeric field in a schema definition
    """
    def __init__(self, name: str, **kwargs) -> None:
        ...
    


class GeoShapeField(Field):
    """
    GeoShapeField is used to enable within/contain indexing/searching
    """
    SPHERICAL = ...
    FLAT = ...
    def __init__(self, name: str, coord_system=..., **kwargs) -> None:
        ...
    


class GeoField(Field):
    """
    GeoField is used to define a geo-indexing field in a schema definition
    """
    def __init__(self, name: str, **kwargs) -> None:
        ...
    


class TagField(Field):
    """
    TagField is a tag-indexing field with simpler compression and tokenization.
    See http://redisearch.io/Tags/
    """
    SEPARATOR = ...
    CASESENSITIVE = ...
    def __init__(self, name: str, separator: str = ..., case_sensitive: bool = ..., withsuffixtrie: bool = ..., **kwargs) -> None:
        ...
    


class VectorField(Field):
    """
    Allows vector similarity queries against the value in this attribute.
    See https://oss.redis.com/redisearch/Vectors/#vector_fields.
    """
    def __init__(self, name: str, algorithm: str, attributes: dict, **kwargs) -> None:
        """
        Create Vector Field. Notice that Vector cannot have sortable or no_index tag,
        although it's also a Field.

        ``name`` is the name of the field.

        ``algorithm`` can be "FLAT", "HNSW", or "SVS-VAMANA".

        ``attributes`` each algorithm can have specific attributes. Some of them
        are mandatory and some of them are optional. See
        https://oss.redis.com/redisearch/master/Vectors/#specific_creation_attributes_per_algorithm
        for more information.
        """
        ...
    


