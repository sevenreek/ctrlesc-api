"""
This type stub file was generated by pyright.
"""

def ocsp_staple_verifier(con, ocsp_bytes, expected=...): # -> Literal[True]:
    """An implementation of a function for set_ocsp_client_callback in PyOpenSSL.

    This function validates that the provide ocsp_bytes response is valid,
    and matches the expected, stapled responses.
    """
    ...

class OCSPVerifier:
    """A class to verify ssl sockets for RFC6960/RFC6961. This can be used
    when using direct validation of OCSP responses and certificate revocations.

    @see https://datatracker.ietf.org/doc/html/rfc6960
    @see https://datatracker.ietf.org/doc/html/rfc6961
    """
    def __init__(self, sock, host, port, ca_certs=...) -> None:
        ...
    
    def components_from_socket(self): # -> tuple[Any, Any | None, Any]:
        """This function returns the certificate, primary issuer, and primary ocsp
        server in the chain for a socket already wrapped with ssl.
        """
        ...
    
    def components_from_direct_connection(self): # -> tuple[Any, Any | None, Any]:
        """Return the certificate, primary issuer, and primary ocsp server
        from the host defined by the socket. This is useful in cases where
        different certificates are occasionally presented.
        """
        ...
    
    def build_certificate_url(self, server, cert, issuer_cert): # -> str:
        """Return the complete url to the ocsp"""
        ...
    
    def check_certificate(self, server, cert, issuer_url): # -> Literal[True]:
        """Checks the validity of an ocsp server for an issuer"""
        ...
    
    def is_valid(self): # -> Literal[True]:
        """Returns the validity of the certificate wrapping our socket.
        This first retrieves for validate the certificate, issuer_url,
        and ocsp_server for certificate validate. Then retrieves the
        issuer certificate from the issuer_url, and finally checks
        the validity of OCSP revocation status.
        """
        ...
    


