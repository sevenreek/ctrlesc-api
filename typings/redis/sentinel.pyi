"""
This type stub file was generated by pyright.
"""

from typing import Optional
from redis.commands import SentinelCommands
from redis.connection import Connection, ConnectionPool, SSLConnection
from redis.exceptions import ConnectionError

class MasterNotFoundError(ConnectionError):
    ...


class SlaveNotFoundError(ConnectionError):
    ...


class SentinelManagedConnection(Connection):
    def __init__(self, **kwargs) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def connect_to(self, address): # -> None:
        ...
    
    def connect(self): # -> Any | None:
        ...
    
    def read_response(self, disable_decoding=..., *, disconnect_on_error: Optional[bool] = ..., push_request: Optional[bool] = ...):
        ...
    


class SentinelManagedSSLConnection(SentinelManagedConnection, SSLConnection):
    ...


class SentinelConnectionPoolProxy:
    def __init__(self, connection_pool, is_master, check_connection, service_name, sentinel_manager) -> None:
        ...
    
    def reset(self): # -> None:
        ...
    
    def get_master_address(self):
        ...
    
    def rotate_slaves(self): # -> Generator[Any, Any, NoReturn]:
        ...
    


class SentinelConnectionPool(ConnectionPool):
    """
    Sentinel backed connection pool.

    If ``check_connection`` flag is set to True, SentinelManagedConnection
    sends a PING command right after establishing the connection.
    """
    def __init__(self, service_name, sentinel_manager, **kwargs) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def reset(self): # -> None:
        ...
    
    @property
    def master_address(self): # -> None:
        ...
    
    def owns_connection(self, connection): # -> int:
        ...
    
    def get_master_address(self):
        ...
    
    def rotate_slaves(self): # -> Generator[Any, Any, NoReturn]:
        "Round-robin slave balancer"
        ...
    


class Sentinel(SentinelCommands):
    """
    Redis Sentinel cluster client

    >>> from redis.sentinel import Sentinel
    >>> sentinel = Sentinel([('localhost', 26379)], socket_timeout=0.1)
    >>> master = sentinel.master_for('mymaster', socket_timeout=0.1)
    >>> master.set('foo', 'bar')
    >>> slave = sentinel.slave_for('mymaster', socket_timeout=0.1)
    >>> slave.get('foo')
    b'bar'

    ``sentinels`` is a list of sentinel nodes. Each node is represented by
    a pair (hostname, port).

    ``min_other_sentinels`` defined a minimum number of peers for a sentinel.
    When querying a sentinel, if it doesn't meet this threshold, responses
    from that sentinel won't be considered valid.

    ``sentinel_kwargs`` is a dictionary of connection arguments used when
    connecting to sentinel instances. Any argument that can be passed to
    a normal Redis connection can be specified here. If ``sentinel_kwargs`` is
    not specified, any socket_timeout and socket_keepalive options specified
    in ``connection_kwargs`` will be used.

    ``connection_kwargs`` are keyword arguments that will be used when
    establishing a connection to a Redis server.
    """
    def __init__(self, sentinels, min_other_sentinels=..., sentinel_kwargs=..., force_master_ip=..., **connection_kwargs) -> None:
        ...
    
    def execute_command(self, *args, **kwargs): # -> list[Any] | bool:
        """
        Execute Sentinel command in sentinel nodes.
        once - If set to True, then execute the resulting command on a single
        node at random, rather than across the entire sentinel cluster.
        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def check_master_state(self, state, service_name): # -> bool:
        ...
    
    def discover_master(self, service_name): # -> tuple[Any, Any]:
        """
        Asks sentinel servers for the Redis master's address corresponding
        to the service labeled ``service_name``.

        Returns a pair (address, port) or raises MasterNotFoundError if no
        master is found.
        """
        ...
    
    def filter_slaves(self, slaves): # -> list[Any]:
        "Remove slaves that are in an ODOWN or SDOWN state"
        ...
    
    def discover_slaves(self, service_name): # -> list[Any]:
        "Returns a list of alive slaves for service ``service_name``"
        ...
    
    def master_for(self, service_name, redis_class=..., connection_pool_class=..., **kwargs): # -> Redis:
        """
        Returns a redis client instance for the ``service_name`` master.
        Sentinel client will detect failover and reconnect Redis clients
        automatically.

        A :py:class:`~redis.sentinel.SentinelConnectionPool` class is
        used to retrieve the master's address before establishing a new
        connection.

        NOTE: If the master's address has changed, any cached connections to
        the old master are closed.

        By default clients will be a :py:class:`~redis.Redis` instance.
        Specify a different class to the ``redis_class`` argument if you
        desire something different.

        The ``connection_pool_class`` specifies the connection pool to
        use.  The :py:class:`~redis.sentinel.SentinelConnectionPool`
        will be used by default.

        All other keyword arguments are merged with any connection_kwargs
        passed to this class and passed to the connection pool as keyword
        arguments to be used to initialize Redis connections.
        """
        ...
    
    def slave_for(self, service_name, redis_class=..., connection_pool_class=..., **kwargs): # -> Redis:
        """
        Returns redis client instance for the ``service_name`` slave(s).

        A SentinelConnectionPool class is used to retrieve the slave's
        address before establishing a new connection.

        By default clients will be a :py:class:`~redis.Redis` instance.
        Specify a different class to the ``redis_class`` argument if you
        desire something different.

        The ``connection_pool_class`` specifies the connection pool to use.
        The SentinelConnectionPool will be used by default.

        All other keyword arguments are merged with any connection_kwargs
        passed to this class and passed to the connection pool as keyword
        arguments to be used to initialize Redis connections.
        """
        ...
    


