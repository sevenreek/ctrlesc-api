"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from collections import OrderedDict
from dataclasses import dataclass
from enum import Enum
from typing import Any, List, Optional, Union

class CacheEntryStatus(Enum):
    VALID = ...
    IN_PROGRESS = ...


class EvictionPolicyType(Enum):
    time_based = ...
    frequency_based = ...


@dataclass(frozen=True)
class CacheKey:
    command: str
    redis_keys: tuple
    ...


class CacheEntry:
    def __init__(self, cache_key: CacheKey, cache_value: bytes, status: CacheEntryStatus, connection_ref) -> None:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class EvictionPolicyInterface(ABC):
    @property
    @abstractmethod
    def cache(self): # -> None:
        ...
    
    @cache.setter
    def cache(self, value): # -> None:
        ...
    
    @property
    @abstractmethod
    def type(self) -> EvictionPolicyType:
        ...
    
    @abstractmethod
    def evict_next(self) -> CacheKey:
        ...
    
    @abstractmethod
    def evict_many(self, count: int) -> List[CacheKey]:
        ...
    
    @abstractmethod
    def touch(self, cache_key: CacheKey) -> None:
        ...
    


class CacheConfigurationInterface(ABC):
    @abstractmethod
    def get_cache_class(self): # -> None:
        ...
    
    @abstractmethod
    def get_max_size(self) -> int:
        ...
    
    @abstractmethod
    def get_eviction_policy(self): # -> None:
        ...
    
    @abstractmethod
    def is_exceeds_max_size(self, count: int) -> bool:
        ...
    
    @abstractmethod
    def is_allowed_to_cache(self, command: str) -> bool:
        ...
    


class CacheInterface(ABC):
    @property
    @abstractmethod
    def collection(self) -> OrderedDict:
        ...
    
    @property
    @abstractmethod
    def config(self) -> CacheConfigurationInterface:
        ...
    
    @property
    @abstractmethod
    def eviction_policy(self) -> EvictionPolicyInterface:
        ...
    
    @property
    @abstractmethod
    def size(self) -> int:
        ...
    
    @abstractmethod
    def get(self, key: CacheKey) -> Union[CacheEntry, None]:
        ...
    
    @abstractmethod
    def set(self, entry: CacheEntry) -> bool:
        ...
    
    @abstractmethod
    def delete_by_cache_keys(self, cache_keys: List[CacheKey]) -> List[bool]:
        ...
    
    @abstractmethod
    def delete_by_redis_keys(self, redis_keys: List[bytes]) -> List[bool]:
        ...
    
    @abstractmethod
    def flush(self) -> int:
        ...
    
    @abstractmethod
    def is_cachable(self, key: CacheKey) -> bool:
        ...
    


class DefaultCache(CacheInterface):
    def __init__(self, cache_config: CacheConfigurationInterface) -> None:
        ...
    
    @property
    def collection(self) -> OrderedDict:
        ...
    
    @property
    def config(self) -> CacheConfigurationInterface:
        ...
    
    @property
    def eviction_policy(self) -> EvictionPolicyInterface:
        ...
    
    @property
    def size(self) -> int:
        ...
    
    def set(self, entry: CacheEntry) -> bool:
        ...
    
    def get(self, key: CacheKey) -> Union[CacheEntry, None]:
        ...
    
    def delete_by_cache_keys(self, cache_keys: List[CacheKey]) -> List[bool]:
        ...
    
    def delete_by_redis_keys(self, redis_keys: List[bytes]) -> List[bool]:
        ...
    
    def flush(self) -> int:
        ...
    
    def is_cachable(self, key: CacheKey) -> bool:
        ...
    


class LRUPolicy(EvictionPolicyInterface):
    def __init__(self) -> None:
        ...
    
    @property
    def cache(self): # -> CacheInterface:
        ...
    
    @cache.setter
    def cache(self, cache: CacheInterface): # -> None:
        ...
    
    @property
    def type(self) -> EvictionPolicyType:
        ...
    
    def evict_next(self) -> CacheKey:
        ...
    
    def evict_many(self, count: int) -> List[CacheKey]:
        ...
    
    def touch(self, cache_key: CacheKey) -> None:
        ...
    


class EvictionPolicy(Enum):
    LRU = LRUPolicy


class CacheConfig(CacheConfigurationInterface):
    DEFAULT_CACHE_CLASS = DefaultCache
    DEFAULT_EVICTION_POLICY = ...
    DEFAULT_MAX_SIZE = ...
    DEFAULT_ALLOW_LIST = ...
    def __init__(self, max_size: int = ..., cache_class: Any = ..., eviction_policy: EvictionPolicy = ...) -> None:
        ...
    
    def get_cache_class(self): # -> Any:
        ...
    
    def get_max_size(self) -> int:
        ...
    
    def get_eviction_policy(self) -> EvictionPolicy:
        ...
    
    def is_exceeds_max_size(self, count: int) -> bool:
        ...
    
    def is_allowed_to_cache(self, command: str) -> bool:
        ...
    


class CacheFactoryInterface(ABC):
    @abstractmethod
    def get_cache(self) -> CacheInterface:
        ...
    


class CacheFactory(CacheFactoryInterface):
    def __init__(self, cache_config: Optional[CacheConfig] = ...) -> None:
        ...
    
    def get_cache(self) -> CacheInterface:
        ...
    


