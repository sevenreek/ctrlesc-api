"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import Any, Callable, Optional, Tuple, Union

logger = ...
class CredentialProvider:
    """
    Credentials Provider.
    """
    def get_credentials(self) -> Union[Tuple[str], Tuple[str, str]]:
        ...
    
    async def get_credentials_async(self) -> Union[Tuple[str], Tuple[str, str]]:
        ...
    


class StreamingCredentialProvider(CredentialProvider, ABC):
    """
    Credential provider that streams credentials in the background.
    """
    @abstractmethod
    def on_next(self, callback: Callable[[Any], None]): # -> None:
        """
        Specifies the callback that should be invoked
        when the next credentials will be retrieved.

        :param callback: Callback with
        :return:
        """
        ...
    
    @abstractmethod
    def on_error(self, callback: Callable[[Exception], None]): # -> None:
        ...
    
    @abstractmethod
    def is_streaming(self) -> bool:
        ...
    


class UsernamePasswordCredentialProvider(CredentialProvider):
    """
    Simple implementation of CredentialProvider that just wraps static
    username and password.
    """
    def __init__(self, username: Optional[str] = ..., password: Optional[str] = ...) -> None:
        ...
    
    def get_credentials(self): # -> tuple[str, str] | tuple[str]:
        ...
    
    async def get_credentials_async(self) -> Union[Tuple[str], Tuple[str, str]]:
        ...
    


